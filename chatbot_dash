import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, Input, Output, State, clientside_callback

# A simple placeholder LLM response function
def generate_response(user_combined_html):
    """
    Replace this with real logic (OpenAI, HuggingFace, etc.).
    For demo, just echo that we received HTML content.
    """
    return "LLM response: I received your text and/or images."

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Inject a custom <script> to handle clipboard image paste
# and convert it to base64 <img src="data:..."> right away.
# We also define a small helper function `insertImageAtCursor`.
app.index_string = """
<!DOCTYPE html>
<html>
<head>
    {%metas%}
    <title>Single-Area Clipboard Chat</title>
    {%favicon%}
    {%css%}
    <!-- Bootstrap Icons (for user & bot icons) -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
</head>
<body>
    {%app_entry%}
    <footer>
        {%config%}
        {%scripts%}
        {%renderer%}
    </footer>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
      const editableDiv = document.getElementById("clipboard-div");
      if(!editableDiv) return;

      editableDiv.addEventListener("paste", function(e) {
        const items = e.clipboardData?.items || [];
        let handled = false;
        for (let i = 0; i < items.length; i++) {
          let item = items[i];
          // If this is an image, prevent default paste and insert as base64 <img>
          if (item.type.indexOf("image") !== -1) {
            e.preventDefault();
            handled = true;
            let file = item.getAsFile();
            let reader = new FileReader();
            reader.onload = function(evt) {
              insertImageAtCursor(editableDiv, evt.target.result);
            }
            reader.readAsDataURL(file);
          }
        }
        // If we didn't find an image, normal paste of text will occur automatically.
        // Alternatively, you could do advanced text processing here.
      });

      function insertImageAtCursor(container, base64Image) {
        let selection = window.getSelection();
        if (!selection.rangeCount) return;
        let range = selection.getRangeAt(0);

        let img = document.createElement("img");
        img.src = base64Image;
        img.style.maxWidth = "150px";   // example style
        img.style.display = "block";    // or inline, up to you
        img.style.margin = "5px 0";

        range.insertNode(img);
        range.collapse(false);

        // Move the cursor after the inserted image
        selection.removeAllRanges();
        selection.addRange(range);
      }
    });
    </script>
</body>
</html>
"""

app.layout = dbc.Container(fluid=True, children=[
    html.H3("Single Clipboard Area for Text and Images", className="text-center mt-3"),

    dcc.Store(id="chat-store", data=[]),
    dcc.Store(id="clipboard-store"),  # Will hold the userâ€™s pasted HTML temporarily

    # ========================
    # Chat History
    # ========================
    html.Div(
        id="chat-history",
        style={
            "border": "1px solid #ccc",
            "padding": "10px",
    
