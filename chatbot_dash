import dash
from dash import html, dcc, Input, Output, State, callback_context
import dash_bootstrap_components as dbc
import base64
import json
import time
from datetime import datetime

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Create the layout
app.layout = html.Div([
    html.H1("Chatbot with Copy-Paste Support", className="mb-4"),
    html.P("Paste text and/or images directly into the box below.", className="mb-3"),
    
    # Chat history container
    html.Div(id="chat-history", className="mb-4", style={
        "maxHeight": "500px",
        "overflowY": "auto",
        "border": "1px solid #ddd",
        "borderRadius": "5px",
        "padding": "10px"
    }),
    
    # Paste container with custom JavaScript
    html.Div([
        # Hidden div to store the pasted image data
        html.Div(id="pasted-image-store", style={"display": "none"}),
        
        # Paste area
        dcc.Textarea(
            id="paste-area",
            placeholder="Click here and press Ctrl+V to paste text or images",
            style={
                "width": "100%",
                "height": "150px",
                "border": "2px dashed #aaa",
                "borderRadius": "5px",
                "padding": "10px"
            },
            className="mb-2"
        ),
        
        # Preview area for pasted image
        html.Div(id="image-preview", className="mb-3"),
        
        # Send button
        dbc.Button("Send", id="send-button", color="primary", className="mr-2"),
        
        # Clear button
        dbc.Button("Clear Conversation", id="clear-button", color="secondary")
    ]),
    
    # Custom JavaScript for handling paste events
    html.Script("""
        window.addEventListener('DOMContentLoaded', (event) => {
            const pasteArea = document.getElementById('paste-area');
            
            pasteArea.addEventListener('paste', function(e) {
                // Handle text paste normally
                
                // Check for images in the clipboard
                const items = e.clipboardData.items;
                for (let i = 0; i < items.length; i++) {
                    if (items[i].type.indexOf('image') !== -1) {
                        const blob = items[i].getAsFile();
                        const reader = new FileReader();
                        
                        reader.onload = function(event) {
                            // Store the image data in the hidden div
                            document.getElementById('pasted-image-store').setAttribute(
                                'data-image', event.target.result
                            );
                            
                            // Trigger a custom event that Dash can listen for
                            document.getElementById('pasted-image-store').dispatchEvent(
                                new CustomEvent('image-pasted', {bubbles: true})
                            );
                        };
                        
                        reader.readAsDataURL(blob);
                    }
                }
            });
        });
    """)
])

# Store for chat messages
chat_messages = []
current_image = None

# Callback for handling pasted images
@app.callback(
    Output("image-preview", "children"),
    Input("pasted-image-store", "data-image"),
    prevent_initial_call=True
)
def update_image_preview(image_data):
    global current_image
    if image_data:
        current_image = image_data
        return html.Div([
            html.Img(src=image_data, style={"maxWidth": "250px", "maxHeight": "200px"}),
            html.Button("âœ•", id="remove-image", className="btn btn-sm btn-danger", 
                       style={"position": "absolute", "top": "5px", "right": "5px"})
        ], style={"position": "relative", "display": "inline-block"})
    return []

# Callback for sending messages
@app.callback(
    Output("chat-history", "children"),
    Output("paste-area", "value"),
    Output("pasted-image-store", "data-image"),
    Input("send-button", "n_clicks"),
    Input("remove-image", "n_clicks"),
    Input("clear-button", "n_clicks"),
    State("paste-area", "value"),
    State("pasted-image-store", "data-image"),
    prevent_initial_call=True
)
def handle_interaction(send_clicks, remove_clicks, clear_clicks, text_input, image_data):
    global chat_messages, current_image
    
    # Check which button was clicked
    trigger = callback_context.triggered[0]["prop_id"].split(".")[0]
    
    if trigger == "clear-button":
        # Clear chat history
        chat_messages = []
        current_image = None
        return [], "", None
    
    elif trigger == "remove-image":
        # Remove the current image
        current_image = None
        return render_chat_history(), text_input, None
    
    elif trigger == "send-button" and (text_input or current_image):
        # Add user message to chat
        timestamp = datetime.now().strftime("%H:%M:%S")
        user_message = {
            "role": "user",
            "content": text_input or "",
            "image": current_image,
            "time": timestamp
        }
        chat_messages.append(user_message)
        
        # Simulate bot response
        time.sleep(0.5)  # Simulate thinking
        
        # Generate bot response
        if current_image and text_input:
            bot_response = f"I received your message and image. Your message was: '{text_input}'"
        elif current_image:
            bot_response = "I received your image! What would you like to do with it?"
        else:
            bot_response = f"I received your message: '{text_input}'"
        
        bot_timestamp = datetime.now().strftime("%H:%M:%S")
        chat_messages.append({
            "role": "bot",
            "content": bot_response,
            "time": bot_timestamp
        })
        
        # Clear inputs
        current_image = None
        return render_chat_history(), "", None
    
    # Default case - no changes
    return render_chat_history(), text_input, image_data

def render_chat_history():
    """Render the chat history as Dash components"""
    chat_components = []
    
    for msg in chat_messages:
        if msg["role"] == "user":
            # Create user message bubble
            message_content = [
                html.Div([
                    html.Span("You", style={"fontWeight": "bold"}),
                    html.Span(f" ({msg['time']})", style={"fontSize": "0.8em", "color": "#888"})
                ]),
                html.Div(msg["content"])
            ]
            
            # Add image if present
            if "image" in msg and msg["image"]:
                message_content.append(
                    html.Img(src=msg["image"], style={"maxWidth": "250px", "marginTop": "8px"})
                )
            
            chat_components.append(
                html.Div(message_content, className="chat-message user", style={
                    "backgroundColor": "#e6f7ff",
                    "borderLeft": "5px solid #1890ff",
                    "padding": "10px",
                    "borderRadius": "5px",
                    "marginBottom": "10px"
                })
            )
        else:
            # Create bot message bubble
            chat_components.append(
                html.Div([
                    html.Div([
                        html.Span("Bot", style={"fontWeight": "bold"}),
                        html.Span(f" ({msg['time']})", style={"fontSize": "0.8em", "color": "#888"})
                    ]),
                    html.Div(msg["content"])
                ], className="chat-message bot", style={
                    "backgroundColor": "#f6f6f6",
                    "borderLeft": "5px solid #888888",
                    "padding": "10px",
                    "borderRadius": "5px",
                    "marginBottom": "10px"
                })
            )
    
    return chat_components

if __name__ == "__main__":
    app.run_server(debug=True)
